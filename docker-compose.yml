services:
  db:
    image: postgres:13-alpine
    env_file:
      - ./backend/.env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT}:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    depends_on:
      db:
        condition: service_healthy
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - ./backend/.env
    expose:
      - "8080"
    ports:
      - "${PORT}:8080"
    networks:
      - app-network

  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   env_file:
  #     - ./frontend/.env
  #   environment:
  #     NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
  #   depends_on:
  #     - backend
  #   expose:
  #     - "3000"
  #   ports:
  #     - "3010:3000"
  #   networks:
  #     - app-network

  # caddy:
  #   image: caddy:latest
  #   container_name: caddy_proxy
  #   restart: unless-stopped
  #   ports:
  #     - "8098:80"
  #     - "447:443"
  #   volumes:
  #     - ./Caddyfile:/etc/caddy/Caddyfile
  #     - caddy_data:/data
  #     - caddy_config:/config
  #   depends_on:
  #     - frontend
  #     - backend
  #   networks:
  #     - app-network

volumes:
  db_data:
  # caddy_data:
  # caddy_config:

networks:
  app-network:
    driver: bridge
