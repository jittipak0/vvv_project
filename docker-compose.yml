version: "3.8"

services:
  db:
    image: postgres:13-alpine
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    depends_on:
      db:
        condition: service_healthy
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DB_HOST: db
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_PORT: ${DB_PORT}
      JWT_SECRET: ${JWT_SECRET}
      PORT: ${PORT:-8080} # fallback เป็น 8080
    ports:
      - "8080:8080"
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      # ชี้ไปที่ service backend ใน docker-compose (http://backend:8080)
      NEXT_PUBLIC_API_URL: "http://backend:8080/api"
    depends_on:
      - backend
    ports:
      - "3000:3000"
    networks:
      - app-network

volumes:
  db_data:

networks:
  app-network:
    driver: bridge
